while (cmd->next)
	{
		printf("%d\n", i);
		first_cmd(cmd, fd, &i, envv);
		cmd = cmd->next;
		last_cmd(cmd, fd, &i, envv);
		middle_cmd(cmd, fd, &i, envv);
	}
	close_fdeez(cmd, fd);


	----
		while (cmd->next)
	{
		if (!i)/*first cmd*/
		{
			pipe(fd[i]);
			pid = fork();
			if (!pid)
			{
				if (!is_builtin(cmd))
				{
					s = grant_access(cmd);
					if (!s)
						exit(EXIT_FAILURE);
				}
				dup2(cmd->in, 0);
				dup2(cmd->out, 1);
				close(fd[i][0]);
				dup2(fd[i][1], cmd->out);
				close(fd[i][1]);
				if (cmd->out != -1 && cmd->in != -1)
				{
					if (is_builtin(cmd))
					{
						exec_builtin(cmd);
						exit(1);
					}
					else
					{
						execve(s, cmd->args, envv);
						exit(EXIT_FAILURE);
					}
				}
			}
		}
		cmd = cmd->next;
		if (!cmd->next)/*last cmd*/
		{
			if (!cmd->args)
				return ;
			pid = fork();
			if (!pid)
			{
				if (!is_builtin(cmd))
				{
					s = grant_access(cmd);
					if (!s)
						exit(EXIT_FAILURE);
				}
				dup2(cmd->in, 0);
				close(fd[i][1]);
				dup2(fd[i][0], cmd->in);
				dup2(cmd->out, 1);
				close(fd[i][0]);
				if (cmd->out != -1 && cmd->in != -1)
				{
					if (is_builtin(cmd))
					{
						exec_builtin(cmd);
						exit(1);
					}
					else
					{
						execve(s, cmd->args, envv);
						exit(EXIT_FAILURE);
					}
				}
				exit(EXIT_FAILURE);
			}
		}
		else if (cmd->next)/*cmd-in-between*/
		{
			pipe(fd[++i]);
			pid = fork();
			close(fd[i - 1][1]);
			if (!pid)
			{
				if (!is_builtin(cmd))
				{
					s = grant_access(cmd);
					if (!s)
						exit(EXIT_FAILURE);
				}
				close(fd[i][0]);
				dup2(cmd->in, 0);
				dup2(cmd->out, 1);
				dup2(fd[i - 1][0], cmd->in);
				dup2(fd[i][1], cmd->out);
				close(fd[i][1]);
				close(fd[i - 1][0]);
				if (cmd->out != -1 && cmd->in != -1)
				{
					if (is_builtin(cmd))
					{
						exec_builtin(cmd);
						exit(1);
					}
					else
					{
						execve(s, cmd->args, envv);
						exit(EXIT_FAILURE);
					}
				}
			}
			close(fd[i - 1][0]);
			
		}
	}
	i = cmd_list_size(tmp) - 2;
	while (i >= 0)
	{
		close(fd[i][0]);
		close(fd[i][1]);
		i--;
	}
	while (wait(NULL) > 0)
		;
	return ;